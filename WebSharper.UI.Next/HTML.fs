// $begin{copyright}
//
// This file is part of WebSharper
//
// Copyright (c) 2008-2014 IntelliFactory
//
// Licensed under the Apache License, Version 2.0 (the "License"); you
// may not use this file except in compliance with the License.  You may
// obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.  See the License for the specific language governing
// permissions and limitations under the License.
//
// $end{copyright}

namespace WebSharper.UI.Next

open WebSharper

/// This is an auto-generated module providing HTML5 vocabulary.
/// Generated using tags.csv from WebSharper;
/// See tools/UpdateElems.fsx for the code-generation logic.
[<JavaScript>]
module Html =

    // {{ tag normal
    let a ats ch = Doc.Element "a" ats ch
    let a0 ch = Doc.Element "a" [] ch
    let abbr ats ch = Doc.Element "abbr" ats ch
    let abbr0 ch = Doc.Element "abbr" [] ch
    let address ats ch = Doc.Element "address" ats ch
    let address0 ch = Doc.Element "address" [] ch
    let area ats ch = Doc.Element "area" ats ch
    let area0 ch = Doc.Element "area" [] ch
    let article ats ch = Doc.Element "article" ats ch
    let article0 ch = Doc.Element "article" [] ch
    let aside ats ch = Doc.Element "aside" ats ch
    let aside0 ch = Doc.Element "aside" [] ch
    let audio ats ch = Doc.Element "audio" ats ch
    let audio0 ch = Doc.Element "audio" [] ch
    let b ats ch = Doc.Element "b" ats ch
    let b0 ch = Doc.Element "b" [] ch
    let ``base`` ats ch = Doc.Element "base" ats ch
    let base0 ch = Doc.Element "base" [] ch
    let bdi ats ch = Doc.Element "bdi" ats ch
    let bdi0 ch = Doc.Element "bdi" [] ch
    let bdo ats ch = Doc.Element "bdo" ats ch
    let bdo0 ch = Doc.Element "bdo" [] ch
    let blockquote ats ch = Doc.Element "blockquote" ats ch
    let blockquote0 ch = Doc.Element "blockquote" [] ch
    let body ats ch = Doc.Element "body" ats ch
    let body0 ch = Doc.Element "body" [] ch
    let br ats ch = Doc.Element "br" ats ch
    let br0 ch = Doc.Element "br" [] ch
    let button ats ch = Doc.Element "button" ats ch
    let button0 ch = Doc.Element "button" [] ch
    let canvas ats ch = Doc.Element "canvas" ats ch
    let canvas0 ch = Doc.Element "canvas" [] ch
    let caption ats ch = Doc.Element "caption" ats ch
    let caption0 ch = Doc.Element "caption" [] ch
    let cite ats ch = Doc.Element "cite" ats ch
    let cite0 ch = Doc.Element "cite" [] ch
    let code ats ch = Doc.Element "code" ats ch
    let code0 ch = Doc.Element "code" [] ch
    let col ats ch = Doc.Element "col" ats ch
    let col0 ch = Doc.Element "col" [] ch
    let colgroup ats ch = Doc.Element "colgroup" ats ch
    let colgroup0 ch = Doc.Element "colgroup" [] ch
    let command ats ch = Doc.Element "command" ats ch
    let command0 ch = Doc.Element "command" [] ch
    let datalist ats ch = Doc.Element "datalist" ats ch
    let datalist0 ch = Doc.Element "datalist" [] ch
    let dd ats ch = Doc.Element "dd" ats ch
    let dd0 ch = Doc.Element "dd" [] ch
    let del ats ch = Doc.Element "del" ats ch
    let del0 ch = Doc.Element "del" [] ch
    let details ats ch = Doc.Element "details" ats ch
    let details0 ch = Doc.Element "details" [] ch
    let dfn ats ch = Doc.Element "dfn" ats ch
    let dfn0 ch = Doc.Element "dfn" [] ch
    let div ats ch = Doc.Element "div" ats ch
    let div0 ch = Doc.Element "div" [] ch
    let dl ats ch = Doc.Element "dl" ats ch
    let dl0 ch = Doc.Element "dl" [] ch
    let dt ats ch = Doc.Element "dt" ats ch
    let dt0 ch = Doc.Element "dt" [] ch
    let em ats ch = Doc.Element "em" ats ch
    let em0 ch = Doc.Element "em" [] ch
    let embed ats ch = Doc.Element "embed" ats ch
    let embed0 ch = Doc.Element "embed" [] ch
    let fieldset ats ch = Doc.Element "fieldset" ats ch
    let fieldset0 ch = Doc.Element "fieldset" [] ch
    let figcaption ats ch = Doc.Element "figcaption" ats ch
    let figcaption0 ch = Doc.Element "figcaption" [] ch
    let figure ats ch = Doc.Element "figure" ats ch
    let figure0 ch = Doc.Element "figure" [] ch
    let footer ats ch = Doc.Element "footer" ats ch
    let footer0 ch = Doc.Element "footer" [] ch
    let form ats ch = Doc.Element "form" ats ch
    let form0 ch = Doc.Element "form" [] ch
    let h1 ats ch = Doc.Element "h1" ats ch
    let h10 ch = Doc.Element "h1" [] ch
    let h2 ats ch = Doc.Element "h2" ats ch
    let h20 ch = Doc.Element "h2" [] ch
    let h3 ats ch = Doc.Element "h3" ats ch
    let h30 ch = Doc.Element "h3" [] ch
    let h4 ats ch = Doc.Element "h4" ats ch
    let h40 ch = Doc.Element "h4" [] ch
    let h5 ats ch = Doc.Element "h5" ats ch
    let h50 ch = Doc.Element "h5" [] ch
    let h6 ats ch = Doc.Element "h6" ats ch
    let h60 ch = Doc.Element "h6" [] ch
    let head ats ch = Doc.Element "head" ats ch
    let head0 ch = Doc.Element "head" [] ch
    let header ats ch = Doc.Element "header" ats ch
    let header0 ch = Doc.Element "header" [] ch
    let hgroup ats ch = Doc.Element "hgroup" ats ch
    let hgroup0 ch = Doc.Element "hgroup" [] ch
    let hr ats ch = Doc.Element "hr" ats ch
    let hr0 ch = Doc.Element "hr" [] ch
    let html ats ch = Doc.Element "html" ats ch
    let html0 ch = Doc.Element "html" [] ch
    let i ats ch = Doc.Element "i" ats ch
    let i0 ch = Doc.Element "i" [] ch
    let iframe ats ch = Doc.Element "iframe" ats ch
    let iframe0 ch = Doc.Element "iframe" [] ch
    let img ats ch = Doc.Element "img" ats ch
    let img0 ch = Doc.Element "img" [] ch
    let input ats ch = Doc.Element "input" ats ch
    let input0 ch = Doc.Element "input" [] ch
    let ins ats ch = Doc.Element "ins" ats ch
    let ins0 ch = Doc.Element "ins" [] ch
    let kbd ats ch = Doc.Element "kbd" ats ch
    let kbd0 ch = Doc.Element "kbd" [] ch
    let keygen ats ch = Doc.Element "keygen" ats ch
    let keygen0 ch = Doc.Element "keygen" [] ch
    let label ats ch = Doc.Element "label" ats ch
    let label0 ch = Doc.Element "label" [] ch
    let legend ats ch = Doc.Element "legend" ats ch
    let legend0 ch = Doc.Element "legend" [] ch
    let li ats ch = Doc.Element "li" ats ch
    let li0 ch = Doc.Element "li" [] ch
    let link ats ch = Doc.Element "link" ats ch
    let link0 ch = Doc.Element "link" [] ch
    let mark ats ch = Doc.Element "mark" ats ch
    let mark0 ch = Doc.Element "mark" [] ch
    let meta ats ch = Doc.Element "meta" ats ch
    let meta0 ch = Doc.Element "meta" [] ch
    let meter ats ch = Doc.Element "meter" ats ch
    let meter0 ch = Doc.Element "meter" [] ch
    let nav ats ch = Doc.Element "nav" ats ch
    let nav0 ch = Doc.Element "nav" [] ch
    let noframes ats ch = Doc.Element "noframes" ats ch
    let noframes0 ch = Doc.Element "noframes" [] ch
    let noscript ats ch = Doc.Element "noscript" ats ch
    let noscript0 ch = Doc.Element "noscript" [] ch
    let ol ats ch = Doc.Element "ol" ats ch
    let ol0 ch = Doc.Element "ol" [] ch
    let optgroup ats ch = Doc.Element "optgroup" ats ch
    let optgroup0 ch = Doc.Element "optgroup" [] ch
    let output ats ch = Doc.Element "output" ats ch
    let output0 ch = Doc.Element "output" [] ch
    let p ats ch = Doc.Element "p" ats ch
    let p0 ch = Doc.Element "p" [] ch
    let param ats ch = Doc.Element "param" ats ch
    let param0 ch = Doc.Element "param" [] ch
    let picture ats ch = Doc.Element "picture" ats ch
    let picture0 ch = Doc.Element "picture" [] ch
    let pre ats ch = Doc.Element "pre" ats ch
    let pre0 ch = Doc.Element "pre" [] ch
    let progress ats ch = Doc.Element "progress" ats ch
    let progress0 ch = Doc.Element "progress" [] ch
    let q ats ch = Doc.Element "q" ats ch
    let q0 ch = Doc.Element "q" [] ch
    let rp ats ch = Doc.Element "rp" ats ch
    let rp0 ch = Doc.Element "rp" [] ch
    let rt ats ch = Doc.Element "rt" ats ch
    let rt0 ch = Doc.Element "rt" [] ch
    let rtc ats ch = Doc.Element "rtc" ats ch
    let rtc0 ch = Doc.Element "rtc" [] ch
    let ruby ats ch = Doc.Element "ruby" ats ch
    let ruby0 ch = Doc.Element "ruby" [] ch
    let samp ats ch = Doc.Element "samp" ats ch
    let samp0 ch = Doc.Element "samp" [] ch
    let script ats ch = Doc.Element "script" ats ch
    let script0 ch = Doc.Element "script" [] ch
    let section ats ch = Doc.Element "section" ats ch
    let section0 ch = Doc.Element "section" [] ch
    let select ats ch = Doc.Element "select" ats ch
    let select0 ch = Doc.Element "select" [] ch
    let shadow ats ch = Doc.Element "shadow" ats ch
    let shadow0 ch = Doc.Element "shadow" [] ch
    let small ats ch = Doc.Element "small" ats ch
    let small0 ch = Doc.Element "small" [] ch
    let source ats ch = Doc.Element "source" ats ch
    let source0 ch = Doc.Element "source" [] ch
    let span ats ch = Doc.Element "span" ats ch
    let span0 ch = Doc.Element "span" [] ch
    let strong ats ch = Doc.Element "strong" ats ch
    let strong0 ch = Doc.Element "strong" [] ch
    let sub ats ch = Doc.Element "sub" ats ch
    let sub0 ch = Doc.Element "sub" [] ch
    let summary ats ch = Doc.Element "summary" ats ch
    let summary0 ch = Doc.Element "summary" [] ch
    let sup ats ch = Doc.Element "sup" ats ch
    let sup0 ch = Doc.Element "sup" [] ch
    let table ats ch = Doc.Element "table" ats ch
    let table0 ch = Doc.Element "table" [] ch
    let tbody ats ch = Doc.Element "tbody" ats ch
    let tbody0 ch = Doc.Element "tbody" [] ch
    let td ats ch = Doc.Element "td" ats ch
    let td0 ch = Doc.Element "td" [] ch
    let textarea ats ch = Doc.Element "textarea" ats ch
    let textarea0 ch = Doc.Element "textarea" [] ch
    let tfoot ats ch = Doc.Element "tfoot" ats ch
    let tfoot0 ch = Doc.Element "tfoot" [] ch
    let th ats ch = Doc.Element "th" ats ch
    let th0 ch = Doc.Element "th" [] ch
    let thead ats ch = Doc.Element "thead" ats ch
    let thead0 ch = Doc.Element "thead" [] ch
    let time ats ch = Doc.Element "time" ats ch
    let time0 ch = Doc.Element "time" [] ch
    let tr ats ch = Doc.Element "tr" ats ch
    let tr0 ch = Doc.Element "tr" [] ch
    let track ats ch = Doc.Element "track" ats ch
    let track0 ch = Doc.Element "track" [] ch
    let ul ats ch = Doc.Element "ul" ats ch
    let ul0 ch = Doc.Element "ul" [] ch
    let video ats ch = Doc.Element "video" ats ch
    let video0 ch = Doc.Element "video" [] ch
    let wbr ats ch = Doc.Element "wbr" ats ch
    let wbr0 ch = Doc.Element "wbr" [] ch
    // }}

    // {{ attr normal
    let accept = "accept"
    let acceptCharset = "accept-charset"
    let accesskey = "accesskey"
    let align = "align"
    let alt = "alt"
    let altcode = "altcode"
    let archive = "archive"
    let autocomplete = "autocomplete"
    let autofocus = "autofocus"
    let autoplay = "autoplay"
    let autosave = "autosave"
    let axis = "axis"
    let border = "border"
    let bordercolor = "bordercolor"
    let buffered = "buffered"
    let cellpadding = "cellpadding"
    let cellspacing = "cellspacing"
    let challenge = "challenge"
    let char = "char"
    let charoff = "charoff"
    let charset = "charset"
    let ``checked`` = "checked"
    let ``class`` = "class"
    let classid = "classid"
    let codebase = "codebase"
    let codetype = "codetype"
    let cols = "cols"
    let colspan = "colspan"
    let contenteditable = "contenteditable"
    let contextmenu = "contextmenu"
    let coords = "coords"
    let declare = "declare"
    let ``default`` = "default"
    let defer = "defer"
    let disabled = "disabled"
    let download = "download"
    let draggable = "draggable"
    let dropzone = "dropzone"
    let enctype = "enctype"
    let ``for`` = "for"
    let formaction = "formaction"
    let formenctype = "formenctype"
    let formmethod = "formmethod"
    let formnovalidate = "formnovalidate"
    let formtarget = "formtarget"
    let frameborder = "frameborder"
    let headers = "headers"
    let height = "height"
    let hidden = "hidden"
    let high = "high"
    let href = "href"
    let hreflang = "hreflang"
    let http = "http"
    let icon = "icon"
    let id = "id"
    let ismap = "ismap"
    let itemprop = "itemprop"
    let lang = "lang"
    let longdesc = "longdesc"
    let loop = "loop"
    let low = "low"
    let manifest = "manifest"
    let marginheight = "marginheight"
    let marginwidth = "marginwidth"
    let maxlength = "maxlength"
    let media = "media"
    let ``method`` = "method"
    let multiple = "multiple"
    let name = "name"
    let nohref = "nohref"
    let noresize = "noresize"
    let novalidate = "novalidate"
    let pattern = "pattern"
    let ping = "ping"
    let placeholder = "placeholder"
    let poster = "poster"
    let preload = "preload"
    let profile = "profile"
    let pubdate = "pubdate"
    let radiogroup = "radiogroup"
    let readonly = "readonly"
    let rel = "rel"
    let required = "required"
    let rev = "rev"
    let reversed = "reversed"
    let rows = "rows"
    let rowspan = "rowspan"
    let rules = "rules"
    let sandbox = "sandbox"
    let scheme = "scheme"
    let scope = "scope"
    let scoped = "scoped"
    let scrolling = "scrolling"
    let seamless = "seamless"
    let selected = "selected"
    let shape = "shape"
    let size = "size"
    let sizes = "sizes"
    let spellcheck = "spellcheck"
    let src = "src"
    let srcdoc = "srcdoc"
    let srclang = "srclang"
    let standby = "standby"
    let step = "step"
    let style = "style"
    let subject = "subject"
    let tabindex = "tabindex"
    let target = "target"
    let title = "title"
    let ``type`` = "type"
    let usemap = "usemap"
    let valign = "valign"
    let value = "value"
    let valuetype = "valuetype"
    let width = "width"
    let wrap = "wrap"
    // }}

    /// HTML5 element functions.
    module Tags =

        // {{ tag colliding deprecated
        let acronym ats ch = Doc.Element "acronym" ats ch
        let acronym0 ch = Doc.Element "acronym" [] ch
        let applet ats ch = Doc.Element "applet" ats ch
        let applet0 ch = Doc.Element "applet" [] ch
        let basefont ats ch = Doc.Element "basefont" ats ch
        let basefont0 ch = Doc.Element "basefont" [] ch
        let big ats ch = Doc.Element "big" ats ch
        let big0 ch = Doc.Element "big" [] ch
        let center ats ch = Doc.Element "center" ats ch
        let center0 ch = Doc.Element "center" [] ch
        let content ats ch = Doc.Element "content" ats ch
        let content0 ch = Doc.Element "content" [] ch
        let data ats ch = Doc.Element "data" ats ch
        let data0 ch = Doc.Element "data" [] ch
        let dir ats ch = Doc.Element "dir" ats ch
        let dir0 ch = Doc.Element "dir" [] ch
        let font ats ch = Doc.Element "font" ats ch
        let font0 ch = Doc.Element "font" [] ch
        let frame ats ch = Doc.Element "frame" ats ch
        let frame0 ch = Doc.Element "frame" [] ch
        let frameset ats ch = Doc.Element "frameset" ats ch
        let frameset0 ch = Doc.Element "frameset" [] ch
        let isindex ats ch = Doc.Element "isindex" ats ch
        let isindex0 ch = Doc.Element "isindex" [] ch
        let main ats ch = Doc.Element "main" ats ch
        let main0 ch = Doc.Element "main" [] ch
        let map ats ch = Doc.Element "map" ats ch
        let map0 ch = Doc.Element "map" [] ch
        let menu ats ch = Doc.Element "menu" ats ch
        let menu0 ch = Doc.Element "menu" [] ch
        let menuitem ats ch = Doc.Element "menuitem" ats ch
        let menuitem0 ch = Doc.Element "menuitem" [] ch
        let ``object`` ats ch = Doc.Element "object" ats ch
        let object0 ch = Doc.Element "object" [] ch
        let option ats ch = Doc.Element "option" ats ch
        let option0 ch = Doc.Element "option" [] ch
        let s ats ch = Doc.Element "s" ats ch
        let s0 ch = Doc.Element "s" [] ch
        let strike ats ch = Doc.Element "strike" ats ch
        let strike0 ch = Doc.Element "strike" [] ch
        let style ats ch = Doc.Element "style" ats ch
        let style0 ch = Doc.Element "style" [] ch
        let template ats ch = Doc.Element "template" ats ch
        let template0 ch = Doc.Element "template" [] ch
        let title ats ch = Doc.Element "title" ats ch
        let title0 ch = Doc.Element "title" [] ch
        let tt ats ch = Doc.Element "tt" ats ch
        let tt0 ch = Doc.Element "tt" [] ch
        let u ats ch = Doc.Element "u" ats ch
        let u0 ch = Doc.Element "u" [] ch
        let var ats ch = Doc.Element "var" ats ch
        let var0 ch = Doc.Element "var" [] ch
        // }}

    /// HTML attributes.
    module Attributes =

        // {{ attr colliding deprecated
        let action = "action"
        let alink = "alink"
        let async = "async"
        let background = "background"
        let bgcolor = "bgcolor"
        let cite = "cite"
        let clear = "clear"
        let code = "code"
        let color = "color"
        let compact = "compact"
        let content = "content"
        let controls = "controls"
        let data = "data"
        let datetime = "datetime"
        let dir = "dir"
        let face = "face"
        let form = "form"
        let frame = "frame"
        let hspace = "hspace"
        let keytype = "keytype"
        let kind = "kind"
        let label = "label"
        let language = "language"
        let link = "link"
        let list = "list"
        let max = "max"
        let min = "min"
        let noshade = "noshade"
        let nowrap = "nowrap"
        let ``object`` = "object"
        let ``open`` = "open"
        let optimum = "optimum"
        let prompt = "prompt"
        let span = "span"
        let start = "start"
        let summary = "summary"
        let text = "text"
        let version = "version"
        let vlink = "vlink"
        let vspace = "vspace"
        // }}

    /// SVG elements.
    module SvgElements =

        // {{ svgtag normal
        let a ats ch = Doc.SvgElement "a" ats ch
        let altglyph ats ch = Doc.SvgElement "altglyph" ats ch
        let altglyphdef ats ch = Doc.SvgElement "altglyphdef" ats ch
        let altglyphitem ats ch = Doc.SvgElement "altglyphitem" ats ch
        let animate ats ch = Doc.SvgElement "animate" ats ch
        let animatecolor ats ch = Doc.SvgElement "animatecolor" ats ch
        let animatemotion ats ch = Doc.SvgElement "animatemotion" ats ch
        let animatetransform ats ch = Doc.SvgElement "animatetransform" ats ch
        let circle ats ch = Doc.SvgElement "circle" ats ch
        let clippath ats ch = Doc.SvgElement "clippath" ats ch
        let colorProfile ats ch = Doc.SvgElement "color-profile" ats ch
        let cursor ats ch = Doc.SvgElement "cursor" ats ch
        let defs ats ch = Doc.SvgElement "defs" ats ch
        let desc ats ch = Doc.SvgElement "desc" ats ch
        let ellipse ats ch = Doc.SvgElement "ellipse" ats ch
        let feblend ats ch = Doc.SvgElement "feblend" ats ch
        let fecolormatrix ats ch = Doc.SvgElement "fecolormatrix" ats ch
        let fecomponenttransfer ats ch = Doc.SvgElement "fecomponenttransfer" ats ch
        let fecomposite ats ch = Doc.SvgElement "fecomposite" ats ch
        let feconvolvematrix ats ch = Doc.SvgElement "feconvolvematrix" ats ch
        let fediffuselighting ats ch = Doc.SvgElement "fediffuselighting" ats ch
        let fedisplacementmap ats ch = Doc.SvgElement "fedisplacementmap" ats ch
        let fedistantlight ats ch = Doc.SvgElement "fedistantlight" ats ch
        let feflood ats ch = Doc.SvgElement "feflood" ats ch
        let fefunca ats ch = Doc.SvgElement "fefunca" ats ch
        let fefuncb ats ch = Doc.SvgElement "fefuncb" ats ch
        let fefuncg ats ch = Doc.SvgElement "fefuncg" ats ch
        let fefuncr ats ch = Doc.SvgElement "fefuncr" ats ch
        let fegaussianblur ats ch = Doc.SvgElement "fegaussianblur" ats ch
        let feimage ats ch = Doc.SvgElement "feimage" ats ch
        let femerge ats ch = Doc.SvgElement "femerge" ats ch
        let femergenode ats ch = Doc.SvgElement "femergenode" ats ch
        let femorphology ats ch = Doc.SvgElement "femorphology" ats ch
        let feoffset ats ch = Doc.SvgElement "feoffset" ats ch
        let fepointlight ats ch = Doc.SvgElement "fepointlight" ats ch
        let fespecularlighting ats ch = Doc.SvgElement "fespecularlighting" ats ch
        let fespotlight ats ch = Doc.SvgElement "fespotlight" ats ch
        let fetile ats ch = Doc.SvgElement "fetile" ats ch
        let feturbulence ats ch = Doc.SvgElement "feturbulence" ats ch
        let filter ats ch = Doc.SvgElement "filter" ats ch
        let font ats ch = Doc.SvgElement "font" ats ch
        let fontFace ats ch = Doc.SvgElement "font-face" ats ch
        let fontFaceFormat ats ch = Doc.SvgElement "font-face-format" ats ch
        let fontFaceName ats ch = Doc.SvgElement "font-face-name" ats ch
        let fontFaceSrc ats ch = Doc.SvgElement "font-face-src" ats ch
        let fontFaceUri ats ch = Doc.SvgElement "font-face-uri" ats ch
        let foreignobject ats ch = Doc.SvgElement "foreignobject" ats ch
        let g ats ch = Doc.SvgElement "g" ats ch
        let glyph ats ch = Doc.SvgElement "glyph" ats ch
        let glyphref ats ch = Doc.SvgElement "glyphref" ats ch
        let hkern ats ch = Doc.SvgElement "hkern" ats ch
        let image ats ch = Doc.SvgElement "image" ats ch
        let line ats ch = Doc.SvgElement "line" ats ch
        let lineargradient ats ch = Doc.SvgElement "lineargradient" ats ch
        let marker ats ch = Doc.SvgElement "marker" ats ch
        let mask ats ch = Doc.SvgElement "mask" ats ch
        let metadata ats ch = Doc.SvgElement "metadata" ats ch
        let missingGlyph ats ch = Doc.SvgElement "missing-glyph" ats ch
        let mpath ats ch = Doc.SvgElement "mpath" ats ch
        let path ats ch = Doc.SvgElement "path" ats ch
        let pattern ats ch = Doc.SvgElement "pattern" ats ch
        let polygon ats ch = Doc.SvgElement "polygon" ats ch
        let polyline ats ch = Doc.SvgElement "polyline" ats ch
        let radialgradient ats ch = Doc.SvgElement "radialgradient" ats ch
        let rect ats ch = Doc.SvgElement "rect" ats ch
        let script ats ch = Doc.SvgElement "script" ats ch
        let set ats ch = Doc.SvgElement "set" ats ch
        let stop ats ch = Doc.SvgElement "stop" ats ch
        let style ats ch = Doc.SvgElement "style" ats ch
        let svg ats ch = Doc.SvgElement "svg" ats ch
        let switch ats ch = Doc.SvgElement "switch" ats ch
        let symbol ats ch = Doc.SvgElement "symbol" ats ch
        let text ats ch = Doc.SvgElement "text" ats ch
        let textpath ats ch = Doc.SvgElement "textpath" ats ch
        let title ats ch = Doc.SvgElement "title" ats ch
        let tref ats ch = Doc.SvgElement "tref" ats ch
        let tspan ats ch = Doc.SvgElement "tspan" ats ch
        let ``use`` ats ch = Doc.SvgElement "use" ats ch
        let view ats ch = Doc.SvgElement "view" ats ch
        let vkern ats ch = Doc.SvgElement "vkern" ats ch
        // }}

    /// SVG attributes.
    module SvgAttributes =

        // {{ svgattr normal
        let accentHeight = "accent-height"
        let accumulate = "accumulate"
        let additive = "additive"
        let alignmentBaseline = "alignment-baseline"
        let ascent = "ascent"
        let attributeName = "attributeName"
        let attributeType = "attributeType"
        let azimuth = "azimuth"
        let baseFrequency = "baseFrequency"
        let baselineShift = "baseline-shift"
        let ``begin`` = "begin"
        let bias = "bias"
        let calcMode = "calcMode"
        let ``class`` = "class"
        let clip = "clip"
        let clipPath = "clip-path"
        let clipPathUnits = "clipPathUnits"
        let clipRule = "clip-rule"
        let color = "color"
        let colorInterpolation = "color-interpolation"
        let colorInterpolationFilters = "color-interpolation-filters"
        let colorProfile = "color-profile"
        let colorRendering = "color-rendering"
        let contentScriptType = "contentScriptType"
        let contentStyleType = "contentStyleType"
        let cursor = "cursor"
        let cx = "cx"
        let cy = "cy"
        let d = "d"
        let diffuseConstant = "diffuseConstant"
        let direction = "direction"
        let display = "display"
        let divisor = "divisor"
        let dominantBaseline = "dominant-baseline"
        let dur = "dur"
        let dx = "dx"
        let dy = "dy"
        let edgeMode = "edgeMode"
        let elevation = "elevation"
        let ``end`` = "end"
        let externalResourcesRequired = "externalResourcesRequired"
        let fill = "fill"
        let fillOpacity = "fill-opacity"
        let fillRule = "fill-rule"
        let filter = "filter"
        let filterRes = "filterRes"
        let filterUnits = "filterUnits"
        let floodColor = "flood-color"
        let floodOpacity = "flood-opacity"
        let fontFamily = "font-family"
        let fontSize = "font-size"
        let fontSizeAdjust = "font-size-adjust"
        let fontStretch = "font-stretch"
        let fontStyle = "font-style"
        let fontVariant = "font-variant"
        let fontWeight = "font-weight"
        let from = "from"
        let gradientTransform = "gradientTransform"
        let gradientUnits = "gradientUnits"
        let height = "height"
        let imageRendering = "image-rendering"
        let ``in`` = "in"
        let in2 = "in2"
        let k1 = "k1"
        let k2 = "k2"
        let k3 = "k3"
        let k4 = "k4"
        let kernelMatrix = "kernelMatrix"
        let kernelUnitLength = "kernelUnitLength"
        let kerning = "kerning"
        let keySplines = "keySplines"
        let keyTimes = "keyTimes"
        let letterSpacing = "letter-spacing"
        let lightingColor = "lighting-color"
        let limitingConeAngle = "limitingConeAngle"
        let local = "local"
        let markerEnd = "marker-end"
        let markerHeight = "markerHeight"
        let markerMid = "marker-mid"
        let markerStart = "marker-start"
        let markerUnits = "markerUnits"
        let markerWidth = "markerWidth"
        let mask = "mask"
        let maskContentUnits = "maskContentUnits"
        let maskUnits = "maskUnits"
        let max = "max"
        let min = "min"
        let mode = "mode"
        let numOctaves = "numOctaves"
        let opacity = "opacity"
        let operator = "operator"
        let order = "order"
        let overflow = "overflow"
        let paintOrder = "paint-order"
        let pathLength = "pathLength"
        let patternContentUnits = "patternContentUnits"
        let patternTransform = "patternTransform"
        let patternUnits = "patternUnits"
        let pointerEvents = "pointer-events"
        let points = "points"
        let pointsAtX = "pointsAtX"
        let pointsAtY = "pointsAtY"
        let pointsAtZ = "pointsAtZ"
        let preserveAlpha = "preserveAlpha"
        let preserveAspectRatio = "preserveAspectRatio"
        let primitiveUnits = "primitiveUnits"
        let r = "r"
        let radius = "radius"
        let repeatCount = "repeatCount"
        let repeatDur = "repeatDur"
        let requiredFeatures = "requiredFeatures"
        let restart = "restart"
        let result = "result"
        let rx = "rx"
        let ry = "ry"
        let scale = "scale"
        let seed = "seed"
        let shapeRendering = "shape-rendering"
        let specularConstant = "specularConstant"
        let specularExponent = "specularExponent"
        let stdDeviation = "stdDeviation"
        let stitchTiles = "stitchTiles"
        let stopColor = "stop-color"
        let stopOpacity = "stop-opacity"
        let stroke = "stroke"
        let strokeDasharray = "stroke-dasharray"
        let strokeDashoffset = "stroke-dashoffset"
        let strokeLinecap = "stroke-linecap"
        let strokeLinejoin = "stroke-linejoin"
        let strokeMiterlimit = "stroke-miterlimit"
        let strokeOpacity = "stroke-opacity"
        let strokeWidth = "stroke-width"
        let style = "style"
        let surfaceScale = "surfaceScale"
        let targetX = "targetX"
        let targetY = "targetY"
        let textAnchor = "text-anchor"
        let textDecoration = "text-decoration"
        let textRendering = "text-rendering"
        let ``to`` = "to"
        let transform = "transform"
        let ``type`` = "type"
        let values = "values"
        let viewBox = "viewBox"
        let visibility = "visibility"
        let width = "width"
        let wordSpacing = "word-spacing"
        let writingMode = "writing-mode"
        let x = "x"
        let x1 = "x1"
        let x2 = "x2"
        let xChannelSelector = "xChannelSelector"
        let y = "y"
        let y1 = "y1"
        let y2 = "y2"
        let yChannelSelector = "yChannelSelector"
        let z = "z"
        // }}
